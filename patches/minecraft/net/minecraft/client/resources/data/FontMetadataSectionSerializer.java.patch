--- before/net/minecraft/client/resources/data/FontMetadataSectionSerializer.java
+++ after/net/minecraft/client/resources/data/FontMetadataSectionSerializer.java
@@ -41,11 +41,11 @@
 
                 JsonObject jsonobject2 = jsonobject1.getAsJsonObject("default");
                 f = JsonUtils.func_151221_a(jsonobject2, "width", f);
-                Validate.inclusiveBetween(0.0D, (double)Float.MAX_VALUE, (double)f, "Invalid default width");
+                Validate.inclusiveBetween(0.0D, 3.4028234663852886E38D, (double)f, "Invalid default width");
                 f1 = JsonUtils.func_151221_a(jsonobject2, "spacing", f1);
-                Validate.inclusiveBetween(0.0D, (double)Float.MAX_VALUE, (double)f1, "Invalid default spacing");
+                Validate.inclusiveBetween(0.0D, 3.4028234663852886E38D, (double)f1, "Invalid default spacing");
                 f2 = JsonUtils.func_151221_a(jsonobject2, "left", f1);
-                Validate.inclusiveBetween(0.0D, (double)Float.MAX_VALUE, (double)f2, "Invalid default left");
+                Validate.inclusiveBetween(0.0D, 3.4028234663852886E38D, (double)f2, "Invalid default left");
             }
 
             for (int i = 0; i < 256; ++i)
@@ -59,11 +59,11 @@
                 {
                     JsonObject jsonobject3 = JsonUtils.func_151210_l(jsonelement, "characters[" + i + "]");
                     f3 = JsonUtils.func_151221_a(jsonobject3, "width", f);
-                    Validate.inclusiveBetween(0.0D, (double)Float.MAX_VALUE, (double)f3, "Invalid width");
+                    Validate.inclusiveBetween(0.0D, 3.4028234663852886E38D, (double)f3, "Invalid width");
                     f4 = JsonUtils.func_151221_a(jsonobject3, "spacing", f1);
-                    Validate.inclusiveBetween(0.0D, (double)Float.MAX_VALUE, (double)f4, "Invalid spacing");
+                    Validate.inclusiveBetween(0.0D, 3.4028234663852886E38D, (double)f4, "Invalid spacing");
                     f5 = JsonUtils.func_151221_a(jsonobject3, "left", f2);
-                    Validate.inclusiveBetween(0.0D, (double)Float.MAX_VALUE, (double)f5, "Invalid left");
+                    Validate.inclusiveBetween(0.0D, 3.4028234663852886E38D, (double)f5, "Invalid left");
                 }
 
                 afloat[i] = f3;
