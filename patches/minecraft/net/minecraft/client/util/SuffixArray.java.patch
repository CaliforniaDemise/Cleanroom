--- before/net/minecraft/client/util/SuffixArray.java
+++ after/net/minecraft/client/util/SuffixArray.java
@@ -23,7 +23,7 @@
     private static final boolean field_194062_b = Boolean.parseBoolean(System.getProperty("SuffixArray.printComparisons", "false"));
     private static final boolean field_194063_c = Boolean.parseBoolean(System.getProperty("SuffixArray.printArray", "false"));
     private static final Logger field_194064_d = LogManager.getLogger();
-    protected final List<T> field_194061_a = Lists.newArrayList();
+    protected final List<T> field_194061_a = Lists.<T>newArrayList();
     private final IntList field_194065_e = new IntArrayList();
     private final IntList field_194066_f = new IntArrayList();
     private IntList field_194067_g = new IntArrayList();
@@ -134,9 +134,9 @@
 
     private void func_194060_b()
     {
-        for (int i = 0; i < this.field_194067_g.size(); ++i)
+        for (int i2 = 0; i2 < this.field_194067_g.size(); ++i2)
         {
-            field_194064_d.debug("{} {}", i, this.func_194059_a(i));
+            field_194064_d.debug("{} {}", Integer.valueOf(i2), this.func_194059_a(i2));
         }
 
         field_194064_d.debug("");
@@ -144,25 +144,25 @@
 
     private String func_194059_a(int p_194059_1_)
     {
-        int i = this.field_194068_h.getInt(p_194059_1_);
-        int j = this.field_194066_f.getInt(this.field_194067_g.getInt(p_194059_1_));
+        int i2 = this.field_194068_h.getInt(p_194059_1_);
+        int j2 = this.field_194066_f.getInt(this.field_194067_g.getInt(p_194059_1_));
         StringBuilder stringbuilder = new StringBuilder();
 
-        for (int k = 0; j + k < this.field_194065_e.size(); ++k)
+        for (int k2 = 0; j2 + k2 < this.field_194065_e.size(); ++k2)
         {
-            if (k == i)
+            if (k2 == i2)
             {
                 stringbuilder.append('^');
             }
 
-            int l = this.field_194065_e.get(j + k);
+            int l2 = ((Integer)this.field_194065_e.get(j2 + k2)).intValue();
 
-            if (l == -1)
+            if (l2 == -1)
             {
                 break;
             }
 
-            stringbuilder.append((char)l);
+            stringbuilder.append((char)l2);
         }
 
         return stringbuilder.toString();
@@ -170,20 +170,20 @@
 
     private int func_194056_a(String p_194056_1_, int p_194056_2_)
     {
-        int i = this.field_194066_f.getInt(this.field_194067_g.getInt(p_194056_2_));
-        int j = this.field_194068_h.getInt(p_194056_2_);
+        int i2 = this.field_194066_f.getInt(this.field_194067_g.getInt(p_194056_2_));
+        int j2 = this.field_194068_h.getInt(p_194056_2_);
 
-        for (int k = 0; k < p_194056_1_.length(); ++k)
+        for (int k2 = 0; k2 < p_194056_1_.length(); ++k2)
         {
-            int l = this.field_194065_e.getInt(i + j + k);
+            int l2 = this.field_194065_e.getInt(i2 + j2 + k2);
 
-            if (l == -1)
+            if (l2 == -1)
             {
                 return 1;
             }
 
-            char c0 = p_194056_1_.charAt(k);
-            char c1 = (char)l;
+            char c0 = p_194056_1_.charAt(k2);
+            char c1 = (char)l2;
 
             if (c0 < c1)
             {
@@ -201,77 +201,77 @@
 
     public List<T> func_194055_a(String p_194055_1_)
     {
-        int i = this.field_194067_g.size();
-        int j = 0;
-        int k = i;
+        int i2 = this.field_194067_g.size();
+        int j2 = 0;
+        int k2 = i2;
 
-        while (j < k)
+        while (j2 < k2)
         {
-            int l = j + (k - j) / 2;
-            int i1 = this.func_194056_a(p_194055_1_, l);
+            int l2 = j2 + (k2 - j2) / 2;
+            int i3 = this.func_194056_a(p_194055_1_, l2);
 
             if (field_194062_b)
             {
-                field_194064_d.debug("comparing lower \"{}\" with {} \"{}\": {}", p_194055_1_, l, this.func_194059_a(l), i1);
+                field_194064_d.debug("comparing lower \"{}\" with {} \"{}\": {}", p_194055_1_, Integer.valueOf(l2), this.func_194059_a(l2), Integer.valueOf(i3));
             }
 
-            if (i1 > 0)
+            if (i3 > 0)
             {
-                j = l + 1;
+                j2 = l2 + 1;
             }
             else
             {
-                k = l;
+                k2 = l2;
             }
         }
 
-        if (j >= 0 && j < i)
+        if (j2 >= 0 && j2 < i2)
         {
-            int i2 = j;
-            k = i;
+            int i4 = j2;
+            k2 = i2;
 
-            while (j < k)
+            while (j2 < k2)
             {
-                int j2 = j + (k - j) / 2;
-                int j1 = this.func_194056_a(p_194055_1_, j2);
+                int j4 = j2 + (k2 - j2) / 2;
+                int j3 = this.func_194056_a(p_194055_1_, j4);
 
                 if (field_194062_b)
                 {
-                    field_194064_d.debug("comparing upper \"{}\" with {} \"{}\": {}", p_194055_1_, j2, this.func_194059_a(j2), j1);
+                    field_194064_d.debug("comparing upper \"{}\" with {} \"{}\": {}", p_194055_1_, Integer.valueOf(j4), this.func_194059_a(j4), Integer.valueOf(j3));
                 }
 
-                if (j1 >= 0)
+                if (j3 >= 0)
                 {
-                    j = j2 + 1;
+                    j2 = j4 + 1;
                 }
                 else
                 {
-                    k = j2;
+                    k2 = j4;
                 }
             }
 
-            int k2 = j;
+            int k4 = j2;
             IntSet intset = new IntOpenHashSet();
 
-            for (int k1 = i2; k1 < k2; ++k1)
+            for (int k3 = i4; k3 < k4; ++k3)
             {
-                intset.add(this.field_194067_g.getInt(k1));
+                intset.add(this.field_194067_g.getInt(k3));
             }
 
-            int[] aint = intset.toIntArray();
-            java.util.Arrays.sort(aint);
-            Set<T> set = Sets.newLinkedHashSet();
+            int[] aint4 = intset.toIntArray();
+            java.util.Arrays.sort(aint4);
+            Set<T> set = Sets.<T>newLinkedHashSet();
 
-            for (int l1 : aint)
+            for (int l3 : aint4)
             {
-                set.add(this.field_194061_a.get(l1));
+                set.add(this.field_194061_a.get(l3));
             }
 
             return Lists.newArrayList(set);
         }
         else
         {
-            return Collections.emptyList();
+            return Collections.<T>emptyList();
         }
     }
 }
