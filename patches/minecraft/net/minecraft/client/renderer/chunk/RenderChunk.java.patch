--- before/net/minecraft/client/renderer/chunk/RenderChunk.java
+++ after/net/minecraft/client/renderer/chunk/RenderChunk.java
@@ -42,7 +42,7 @@
     private final ReentrantLock field_178587_g = new ReentrantLock();
     private final ReentrantLock field_178598_h = new ReentrantLock();
     private ChunkCompileTaskGenerator field_178599_i;
-    private final Set<TileEntity> field_181056_j = Sets.newHashSet();
+    private final Set<TileEntity> field_181056_j = Sets.<TileEntity>newHashSet();
     private final int field_178596_j;
     private final FloatBuffer field_178597_k = GLAllocation.func_74529_h(16);
     private final VertexBuffer[] field_178594_l = new VertexBuffer[BlockRenderLayer.values().length];
@@ -162,27 +162,29 @@
                     lvt_9_1_.func_178606_a(blockpos$mutableblockpos);
                 }
 
-                if (block.func_149716_u())
+                if (block.hasTileEntity(iblockstate))
                 {
                     TileEntity tileentity = this.field_189564_r.func_190300_a(blockpos$mutableblockpos, Chunk.EnumCreateEntityType.CHECK);
 
                     if (tileentity != null)
                     {
-                        TileEntitySpecialRenderer<TileEntity> tileentityspecialrenderer = TileEntityRendererDispatcher.field_147556_a.func_147547_b(tileentity);
+                        TileEntitySpecialRenderer<TileEntity> tileentityspecialrenderer = TileEntityRendererDispatcher.field_147556_a.<TileEntity>func_147547_b(tileentity);
 
                         if (tileentityspecialrenderer != null)
                         {
-                            compiledchunk.func_178490_a(tileentity);
 
                             if (tileentityspecialrenderer.func_188185_a(tileentity))
                             {
                                 lvt_10_1_.add(tileentity);
                             }
+                            else compiledchunk.func_178490_a(tileentity); // FORGE: Fix MC-112730
                         }
                     }
                 }
 
-                BlockRenderLayer blockrenderlayer1 = block.func_180664_k();
+                for(BlockRenderLayer blockrenderlayer1 : BlockRenderLayer.values()) {
+                     if(!block.canRenderInLayer(iblockstate, blockrenderlayer1)) continue;
+                     net.minecraftforge.client.ForgeHooksClient.setRenderLayer(blockrenderlayer1);
                 int j = blockrenderlayer1.ordinal();
 
                 if (block.func_176223_P().func_185901_i() != EnumBlockRenderType.INVISIBLE)
@@ -197,6 +199,8 @@
 
                     aboolean[j] |= blockrendererdispatcher.func_175018_a(iblockstate, blockpos$mutableblockpos, this.field_189564_r, bufferbuilder);
                 }
+                }
+                net.minecraftforge.client.ForgeHooksClient.setRenderLayer(null);
             }
 
             for (BlockRenderLayer blockrenderlayer : BlockRenderLayer.values())
@@ -278,14 +282,16 @@
     private void func_189563_q()
     {
         int i = 1;
-        this.field_189564_r = new ChunkCache(this.field_178588_d, this.field_178586_f.func_177982_a(-1, -1, -1), this.field_178586_f.func_177982_a(16, 16, 16), 1);
+        ChunkCache cache = createRegionRenderCache(this.field_178588_d, this.field_178586_f.func_177982_a(-1, -1, -1), this.field_178586_f.func_177982_a(16, 16, 16), 1);
+        net.minecraftforge.client.MinecraftForgeClient.onRebuildChunk(this.field_178588_d, this.field_178586_f, cache);
+        this.field_189564_r = cache;
     }
 
     @Nullable
     public ChunkCompileTaskGenerator func_178582_e()
     {
         this.field_178587_g.lock();
-        Object object;
+        ChunkCompileTaskGenerator chunkcompiletaskgenerator;
 
         try
         {
@@ -299,17 +305,18 @@
 
                 this.field_178599_i = new ChunkCompileTaskGenerator(this, ChunkCompileTaskGenerator.Type.RESORT_TRANSPARENCY, this.func_188280_f());
                 this.field_178599_i.func_178543_a(this.field_178590_b);
-                return this.field_178599_i;
+                chunkcompiletaskgenerator = this.field_178599_i;
+                return chunkcompiletaskgenerator;
             }
 
-            object = null;
+            chunkcompiletaskgenerator = null;
         }
         finally
         {
             this.field_178587_g.unlock();
         }
 
-        return (ChunkCompileTaskGenerator)object;
+        return chunkcompiletaskgenerator;
     }
 
     protected double func_188280_f()
@@ -425,6 +432,26 @@
     {
         return this.field_178593_n && this.field_188284_q;
     }
+
+    /* ======================================== FORGE START =====================================*/
+    /**
+     * Creates a new RegionRenderCache instance.<br>
+     * Extending classes can change the behavior of the cache, allowing to visually change
+     * blocks (schematics etc).
+     *
+     * @see RegionRenderCache
+     * @param world The world to cache.
+     * @param from The starting position of the chunk minus one on each axis.
+     * @param to The ending position of the chunk plus one on each axis.
+     * @param subtract Padding used internally by the RegionRenderCache constructor to make
+     *                 the cache a 20x20x20 cube, for a total of 8000 states in the cache.
+     * @return new RegionRenderCache instance
+     */
+    protected ChunkCache createRegionRenderCache(World world, BlockPos from, BlockPos to, int subtract)
+    {
+        return new ChunkCache(world, from, to, subtract);
+    }
+    /* ========================================= FORGE END ======================================*/
 
     public BlockPos func_181701_a(EnumFacing p_181701_1_)
     {
