--- before/net/minecraft/client/audio/SoundManager.java
+++ after/net/minecraft/client/audio/SoundManager.java
@@ -18,6 +18,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.Map.Entry;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.settings.GameSettings;
 import net.minecraft.entity.player.EntityPlayer;
@@ -44,23 +45,30 @@
 {
     private static final Marker field_148623_a = MarkerManager.getMarker("SOUNDS");
     private static final Logger field_148621_b = LogManager.getLogger();
-    private static final Set<ResourceLocation> field_188775_c = Sets.newHashSet();
+    private static final Set<ResourceLocation> field_188775_c = Sets.<ResourceLocation>newHashSet();
     public final SoundHandler field_148622_c;
     private final GameSettings field_148619_d;
     private SoundManager.SoundSystemStarterThread field_148620_e;
     private boolean field_148617_f;
     private int field_148618_g;
-    private final Map<String, ISound> field_148629_h = HashBiMap.create();
-    private final Map<ISound, String> field_148630_i = ((BiMap)this.field_148629_h).inverse();
-    private final Multimap<SoundCategory, String> field_188776_k = HashMultimap.create();
-    private final List<ITickableSound> field_148625_l = Lists.newArrayList();
-    private final Map<ISound, Integer> field_148626_m = Maps.newHashMap();
-    private final Map<String, Integer> field_148624_n = Maps.newHashMap();
-    private final List<ISoundEventListener> field_188777_o = Lists.newArrayList();
-    private final List<String> field_189000_p = Lists.newArrayList();
+    private final Map<String, ISound> field_148629_h = HashBiMap.<String, ISound>create();
+    private final Map<ISound, String> field_148630_i;
+    private final Multimap<SoundCategory, String> field_188776_k;
+    private final List<ITickableSound> field_148625_l;
+    private final Map<ISound, Integer> field_148626_m;
+    private final Map<String, Integer> field_148624_n;
+    private final List<ISoundEventListener> field_188777_o;
+    private final List<String> field_189000_p;
 
     public SoundManager(SoundHandler p_i45119_1_, GameSettings p_i45119_2_)
     {
+        this.field_148630_i = ((BiMap)this.field_148629_h).inverse();
+        this.field_188776_k = HashMultimap.<SoundCategory, String>create();
+        this.field_148625_l = Lists.<ITickableSound>newArrayList();
+        this.field_148626_m = Maps.<ISound, Integer>newHashMap();
+        this.field_148624_n = Maps.<String, Integer>newHashMap();
+        this.field_188777_o = Lists.<ISoundEventListener>newArrayList();
+        this.field_189000_p = Lists.<String>newArrayList();
         this.field_148622_c = p_i45119_1_;
         this.field_148619_d = p_i45119_2_;
 
@@ -68,6 +76,7 @@
         {
             SoundSystemConfig.addLibrary(LibraryLWJGLOpenAL.class);
             SoundSystemConfig.setCodec("ogg", CodecJOrbis.class);
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.sound.SoundSetupEvent(this));
         }
         catch (SoundSystemException soundsystemexception)
         {
@@ -92,6 +101,7 @@
 
         this.func_148613_b();
         this.func_148608_i();
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.sound.SoundLoadEvent(this));
     }
 
     private synchronized void func_148608_i()
@@ -197,6 +207,7 @@
                 this.field_148620_e.stop(s);
             }
 
+            this.field_189000_p.clear(); //Forge: MC-35856 Fixed paused sounds repeating when switching worlds
             this.field_148629_h.clear();
             this.field_148626_m.clear();
             this.field_148625_l.clear();
@@ -236,17 +247,17 @@
             }
         }
 
-        Iterator<Map.Entry<String, ISound>> iterator = this.field_148629_h.entrySet().iterator();
+        Iterator<Entry<String, ISound>> iterator = this.field_148629_h.entrySet().iterator();
 
         while (iterator.hasNext())
         {
-            Map.Entry<String, ISound> entry = iterator.next();
+            Entry<String, ISound> entry = (Entry)iterator.next();
             String s1 = entry.getKey();
             ISound isound = entry.getValue();
 
             if (!this.field_148620_e.playing(s1))
             {
-                int i = this.field_148624_n.get(s1);
+                int i = ((Integer)this.field_148624_n.get(s1)).intValue();
 
                 if (i <= this.field_148618_g)
                 {
@@ -254,7 +265,7 @@
 
                     if (isound.func_147657_c() && j > 0)
                     {
-                        this.field_148626_m.put(isound, this.field_148618_g + j);
+                        this.field_148626_m.put(isound, Integer.valueOf(this.field_148618_g + j));
                     }
 
                     iterator.remove();
@@ -266,8 +277,9 @@
                     {
                         this.field_188776_k.remove(isound.func_184365_d(), s1);
                     }
-                    catch (RuntimeException runtimeexception)
+                    catch (RuntimeException var8)
                     {
+                        ;
                     }
 
                     if (isound instanceof ITickableSound)
@@ -278,13 +290,13 @@
             }
         }
 
-        Iterator<Map.Entry<ISound, Integer>> iterator1 = this.field_148626_m.entrySet().iterator();
+        Iterator<Entry<ISound, Integer>> iterator1 = this.field_148626_m.entrySet().iterator();
 
         while (iterator1.hasNext())
         {
-            Map.Entry<ISound, Integer> entry1 = iterator1.next();
+            Entry<ISound, Integer> entry1 = (Entry)iterator1.next();
 
-            if (this.field_148618_g >= entry1.getValue())
+            if (this.field_148618_g >= ((Integer)entry1.getValue()).intValue())
             {
                 ISound isound1 = entry1.getKey();
 
@@ -315,7 +327,7 @@
             }
             else
             {
-                return this.field_148620_e.playing(s) || this.field_148624_n.containsKey(s) && this.field_148624_n.get(s) <= this.field_148618_g;
+                return this.field_148620_e.playing(s) || this.field_148624_n.containsKey(s) && ((Integer)this.field_148624_n.get(s)).intValue() <= this.field_148618_g;
             }
         }
     }
@@ -337,6 +349,9 @@
     {
         if (this.field_148617_f)
         {
+            p_148611_1_ = net.minecraftforge.client.ForgeHooksClient.playSound(this, p_148611_1_);
+            if (p_148611_1_ == null) return;
+
             SoundEventAccessor soundeventaccessor = p_148611_1_.func_184366_a(this.field_148622_c);
             ResourceLocation resourcelocation = p_148611_1_.func_147650_b();
 
@@ -399,17 +414,19 @@
                             if (sound.func_188723_h())
                             {
                                 this.field_148620_e.newStreamingSource(false, s, func_148612_a(resourcelocation1), resourcelocation1.toString(), flag, p_148611_1_.func_147649_g(), p_148611_1_.func_147654_h(), p_148611_1_.func_147651_i(), p_148611_1_.func_147656_j().func_148586_a(), f);
+                                net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.sound.PlayStreamingSourceEvent(this, p_148611_1_, s));
                             }
                             else
                             {
                                 this.field_148620_e.newSource(false, s, func_148612_a(resourcelocation1), resourcelocation1.toString(), flag, p_148611_1_.func_147649_g(), p_148611_1_.func_147654_h(), p_148611_1_.func_147651_i(), p_148611_1_.func_147656_j().func_148586_a(), f);
+                                net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.sound.PlaySoundSourceEvent(this, p_148611_1_, s));
                             }
 
                             field_148621_b.debug(field_148623_a, "Playing sound {} for event {} as channel {}", sound.func_188719_a(), resourcelocation, s);
                             this.field_148620_e.setPitch(s, f2);
                             this.field_148620_e.setVolume(s, f1);
                             this.field_148620_e.play(s);
-                            this.field_148624_n.put(s, this.field_148618_g + 20);
+                            this.field_148624_n.put(s, Integer.valueOf(this.field_148618_g + 20));
                             this.field_148629_h.put(s, p_148611_1_);
                             this.field_188776_k.put(soundcategory, s);
 
@@ -436,7 +453,7 @@
 
     public void func_148610_e()
     {
-        for (Map.Entry<String, ISound> entry : this.field_148629_h.entrySet())
+        for (Entry<String, ISound> entry : this.field_148629_h.entrySet())
         {
             String s = entry.getKey();
             boolean flag = this.func_148597_a(entry.getValue());
@@ -463,7 +480,7 @@
 
     public void func_148599_a(ISound p_148599_1_, int p_148599_2_)
     {
-        this.field_148626_m.put(p_148599_1_, this.field_148618_g + p_148599_2_);
+        this.field_148626_m.put(p_148599_1_, Integer.valueOf(this.field_148618_g + p_148599_2_));
     }
 
     private static URL func_148612_a(final ResourceLocation p_148612_0_)
@@ -490,7 +507,7 @@
         {
             return new URL((URL)null, s, urlstreamhandler);
         }
-        catch (MalformedURLException malformedurlexception)
+        catch (MalformedURLException var4)
         {
             throw new Error("TODO: Sanely handle url exception! :D");
         }
@@ -498,6 +515,11 @@
 
     public void func_148615_a(EntityPlayer p_148615_1_, float p_148615_2_)
     {
+        setListener((net.minecraft.entity.Entity) p_148615_1_, p_148615_2_);
+    }
+
+    public void setListener(net.minecraft.entity.Entity p_148615_1_, float p_148615_2_)
+    {
         if (this.field_148617_f && p_148615_1_ != null)
         {
             float f = p_148615_1_.field_70127_C + (p_148615_1_.field_70125_A - p_148615_1_.field_70127_C) * p_148615_2_;
@@ -505,12 +527,12 @@
             double d0 = p_148615_1_.field_70169_q + (p_148615_1_.field_70165_t - p_148615_1_.field_70169_q) * (double)p_148615_2_;
             double d1 = p_148615_1_.field_70167_r + (p_148615_1_.field_70163_u - p_148615_1_.field_70167_r) * (double)p_148615_2_ + (double)p_148615_1_.func_70047_e();
             double d2 = p_148615_1_.field_70166_s + (p_148615_1_.field_70161_v - p_148615_1_.field_70166_s) * (double)p_148615_2_;
-            float f2 = MathHelper.func_76134_b((f1 + 90.0F) * ((float)Math.PI / 180F));
-            float f3 = MathHelper.func_76126_a((f1 + 90.0F) * ((float)Math.PI / 180F));
-            float f4 = MathHelper.func_76134_b(-f * ((float)Math.PI / 180F));
-            float f5 = MathHelper.func_76126_a(-f * ((float)Math.PI / 180F));
-            float f6 = MathHelper.func_76134_b((-f + 90.0F) * ((float)Math.PI / 180F));
-            float f7 = MathHelper.func_76126_a((-f + 90.0F) * ((float)Math.PI / 180F));
+            float f2 = MathHelper.func_76134_b((f1 + 90.0F) * 0.017453292F);
+            float f3 = MathHelper.func_76126_a((f1 + 90.0F) * 0.017453292F);
+            float f4 = MathHelper.func_76134_b(-f * 0.017453292F);
+            float f5 = MathHelper.func_76126_a(-f * 0.017453292F);
+            float f6 = MathHelper.func_76134_b((-f + 90.0F) * 0.017453292F);
+            float f7 = MathHelper.func_76126_a((-f + 90.0F) * 0.017453292F);
             float f8 = f2 * f4;
             float f9 = f3 * f4;
             float f10 = f2 * f6;
@@ -571,7 +593,7 @@
                 }
                 else
                 {
-                    Source source = this.soundLibrary.getSources().get(p_playing_1_);
+                    Source source = (Source)this.soundLibrary.getSources().get(p_playing_1_);
 
                     if (source == null)
                     {
