--- before/net/minecraft/network/rcon/RConThreadQuery.java
+++ after/net/minecraft/network/rcon/RConThreadQuery.java
@@ -15,6 +15,7 @@
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Random;
+import java.util.Map.Entry;
 import net.minecraft.server.MinecraftServer;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
@@ -74,14 +75,14 @@
         {
             this.field_72636_h = this.field_72637_i;
             this.func_72609_b("Setting default query port to " + this.field_72636_h);
-            p_i1536_1_.func_71328_a("query.port", this.field_72636_h);
-            p_i1536_1_.func_71328_a("debug", false);
+            p_i1536_1_.func_71328_a("query.port", Integer.valueOf(this.field_72636_h));
+            p_i1536_1_.func_71328_a("debug", Boolean.valueOf(false));
             p_i1536_1_.func_71326_a();
         }
 
-        this.field_72644_p = Maps.newHashMap();
+        this.field_72644_p = Maps.<SocketAddress, String>newHashMap();
         this.field_72639_u = new RConOutputStream(1460);
-        this.field_72641_s = Maps.newHashMap();
+        this.field_72641_s = Maps.<SocketAddress, RConThreadQuery.Auth>newHashMap();
         this.field_72640_t = (new Date()).getTime();
     }
 
@@ -105,7 +106,7 @@
             {
                 case 0:
 
-                    if (!this.func_72627_c(p_72621_1_))
+                    if (!this.func_72627_c(p_72621_1_).booleanValue())
                     {
                         this.func_72607_a("Invalid challenge [" + socketaddress + "]");
                         return false;
@@ -207,7 +208,7 @@
 
     private byte[] func_72625_a(SocketAddress p_72625_1_)
     {
-        return this.field_72641_s.get(p_72625_1_).func_72591_c();
+        return ((RConThreadQuery.Auth)this.field_72641_s.get(p_72625_1_)).func_72591_c();
     }
 
     private Boolean func_72627_c(DatagramPacket p_72627_1_)
@@ -221,7 +222,7 @@
         else
         {
             byte[] abyte = p_72627_1_.getData();
-            return this.field_72641_s.get(socketaddress).func_72592_a() != RConUtils.func_72664_c(abyte, 7, p_72627_1_.getLength()) ? false : true;
+            return ((RConThreadQuery.Auth)this.field_72641_s.get(socketaddress)).func_72592_a() != RConUtils.func_72664_c(abyte, 7, p_72627_1_.getLength()) ? false : true;
         }
     }
 
@@ -241,13 +242,13 @@
             if (i >= this.field_72629_g + 30000L)
             {
                 this.field_72629_g = i;
-                Iterator<Map.Entry<SocketAddress, RConThreadQuery.Auth>> iterator = this.field_72641_s.entrySet().iterator();
+                Iterator<Entry<SocketAddress, RConThreadQuery.Auth>> iterator = this.field_72641_s.entrySet().iterator();
 
                 while (iterator.hasNext())
                 {
-                    Map.Entry<SocketAddress, RConThreadQuery.Auth> entry = iterator.next();
+                    Entry<SocketAddress, RConThreadQuery.Auth> entry = (Entry)iterator.next();
 
-                    if (entry.getValue().func_72593_a(i))
+                    if (((RConThreadQuery.Auth)entry.getValue()).func_72593_a(i).booleanValue())
                     {
                         iterator.remove();
                     }
@@ -272,12 +273,13 @@
                     this.func_72628_f();
                     this.func_72621_a(this.field_72631_o);
                 }
-                catch (SocketTimeoutException sockettimeoutexception)
+                catch (SocketTimeoutException var7)
                 {
                     this.func_72628_f();
                 }
-                catch (PortUnreachableException portunreachableexception)
+                catch (PortUnreachableException var8)
                 {
+                    ;
                 }
                 catch (IOException ioexception)
                 {
