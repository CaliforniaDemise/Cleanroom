--- before/net/minecraft/crash/CrashReport.java
+++ after/net/minecraft/crash/CrashReport.java
@@ -9,18 +9,25 @@
 import java.io.Writer;
 import java.lang.management.ManagementFactory;
 import java.lang.management.RuntimeMXBean;
+import java.lang.reflect.Method;
 import java.nio.charset.StandardCharsets;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.List;
+import java.util.Set;
+
+import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import net.minecraft.util.ReportedException;
 import net.minecraft.world.gen.layer.IntCache;
+import net.minecraftforge.fml.relauncher.MixinBooterPlugin;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.spongepowered.asm.mixin.extensibility.IMixinInfo;
+import org.spongepowered.asm.mixin.transformer.ClassInfo;
 
 public class CrashReport
 {
@@ -28,7 +35,7 @@
     private final String field_71513_a;
     private final Throwable field_71511_b;
     private final CrashReportCategory field_85061_c = new CrashReportCategory(this, "System Details");
-    private final List<CrashReportCategory> field_71512_c = Lists.newArrayList();
+    private final List<CrashReportCategory> field_71512_c = Lists.<CrashReportCategory>newArrayList();
     private File field_71510_d;
     private boolean field_85059_f = true;
     private StackTraceElement[] field_85060_g = new StackTraceElement[0];
@@ -116,6 +123,7 @@
                 return IntCache.func_85144_b();
             }
         });
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().enhanceCrashReport(this, this.field_85061_c);
     }
 
     public String func_71501_a()
@@ -132,7 +140,7 @@
     {
         if ((this.field_85060_g == null || this.field_85060_g.length <= 0) && !this.field_71512_c.isEmpty())
         {
-            this.field_85060_g = ArrayUtils.subarray(this.field_71512_c.get(0).func_147152_a(), 0, 1);
+            this.field_85060_g = (StackTraceElement[])ArrayUtils.subarray(((CrashReportCategory)this.field_71512_c.get(0)).func_147152_a(), 0, 1);
         }
 
         if (this.field_85060_g != null && this.field_85060_g.length > 0)
@@ -198,6 +206,52 @@
             IOUtils.closeQuietly((Writer)printwriter);
         }
 
+        StackTraceElement[] stacktrace = throwable.getStackTrace();
+        if (stacktrace.length > 0) {
+            try {
+                StringBuilder mixinMetadataBuilder = null;
+                Set<String> classes = new ObjectOpenHashSet<>();
+                for (StackTraceElement stackTraceElement : stacktrace) {
+                    classes.add(stackTraceElement.getClassName());
+                }
+                Method classInfo$getMixins;
+                try {
+                    classInfo$getMixins = ClassInfo.class.getDeclaredMethod("getMixins");
+                    classInfo$getMixins.setAccessible(true);
+                    for (String className : classes) {
+                        ClassInfo classInfo = ClassInfo.fromCache(className);
+                        if (classInfo != null) {
+                            @SuppressWarnings("unchecked")
+                            Set<IMixinInfo> mixinInfos = (Set<IMixinInfo>) classInfo$getMixins.invoke(classInfo);
+                            if (!mixinInfos.isEmpty()) {
+                                if (mixinMetadataBuilder == null) {
+                                    mixinMetadataBuilder = new StringBuilder("\n(MixinBooter) Mixins in Stacktrace:");
+                                }
+                                mixinMetadataBuilder.append("\n\t");
+                                mixinMetadataBuilder.append(className);
+                                mixinMetadataBuilder.append(":");
+                                for (IMixinInfo mixinInfo : mixinInfos) {
+                                    mixinMetadataBuilder.append("\n\t\t");
+                                    mixinMetadataBuilder.append(mixinInfo.getClassName());
+                                    mixinMetadataBuilder.append(" (");
+                                    mixinMetadataBuilder.append(mixinInfo.getConfig().getName());
+                                    mixinMetadataBuilder.append(")");
+                                }
+                            }
+                        }
+                    }
+                } catch (ReflectiveOperationException e) {
+                    MixinBooterPlugin.LOGGER.warn("Not able to reflect ClassInfo#getMixins");
+                }
+                if (mixinMetadataBuilder == null) {
+                    return s + "\nNo Mixin Metadata is found in the Stacktrace.\n";
+                } else {
+                    return s + mixinMetadataBuilder;
+                }
+            } catch (Throwable t) {
+                return s + "\nFailed to find Mixin Metadata in Stacktrace:\n" + t;
+            }
+        }
         return s;
     }
 
@@ -205,6 +259,7 @@
     {
         StringBuilder stringbuilder = new StringBuilder();
         stringbuilder.append("---- Minecraft Crash Report ----\n");
+        net.minecraftforge.fml.relauncher.CoreModManager.onCrash(stringbuilder);
         stringbuilder.append("// ");
         stringbuilder.append(func_71503_h());
         stringbuilder.append("\n\n");
@@ -247,26 +302,27 @@
             }
 
             Writer writer = null;
-            boolean flag;
+            boolean flag1;
 
             try
             {
                 writer = new OutputStreamWriter(new FileOutputStream(p_147149_1_), StandardCharsets.UTF_8);
                 writer.write(this.func_71502_e());
                 this.field_71510_d = p_147149_1_;
-                return true;
+                boolean lvt_3_1_ = true;
+                return lvt_3_1_;
             }
             catch (Throwable throwable)
             {
                 field_147150_a.error("Could not save crash report to {}", p_147149_1_, throwable);
-                flag = false;
+                flag1 = false;
             }
             finally
             {
                 IOUtils.closeQuietly(writer);
             }
 
-            return flag;
+            return flag1;
         }
     }
 
@@ -337,7 +393,7 @@
         {
             return astring[(int)(System.nanoTime() % (long)astring.length)];
         }
-        catch (Throwable throwable)
+        catch (Throwable var2)
         {
             return "Witty comment unavailable :(";
         }
