--- before/net/minecraft/block/state/BlockStateContainer.java
+++ after/net/minecraft/block/state/BlockStateContainer.java
@@ -3,6 +3,7 @@
 import com.google.common.base.Function;
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.HashBasedTable;
+import com.google.common.collect.ImmutableCollection;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSortedMap;
@@ -11,10 +12,12 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Table;
+import com.google.common.collect.UnmodifiableIterator;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
@@ -56,23 +59,33 @@
 
     public BlockStateContainer(Block p_i45663_1_, IProperty<?>... p_i45663_2_)
     {
-        this.field_177627_c = p_i45663_1_;
-        Map < String, IProperty<? >> map = Maps.newHashMap();
-
-        for (IProperty<?> iproperty : p_i45663_2_)
+        this(p_i45663_1_, p_i45663_2_, null);
+    }
+
+    protected StateImplementation createState(Block block, ImmutableMap<IProperty<?>, Comparable<?>> properties, @Nullable ImmutableMap<net.minecraftforge.common.property.IUnlistedProperty<?>, java.util.Optional<?>> unlistedProperties)
+    {
+        return new StateImplementation(block, properties);
+    }
+
+    protected BlockStateContainer(Block blockIn, IProperty<?>[] properties, ImmutableMap<net.minecraftforge.common.property.IUnlistedProperty<?>, java.util.Optional<?>> unlistedProperties)
+    {
+        this.field_177627_c = blockIn;
+        Map < String, IProperty<? >> map = Maps. < String, IProperty<? >> newHashMap();
+
+        for (IProperty<?> iproperty : properties)
         {
-            func_185919_a(p_i45663_1_, iproperty);
+            func_185919_a(blockIn, iproperty);
             map.put(iproperty.func_177701_a(), iproperty);
         }
 
         this.field_177624_d = ImmutableSortedMap.copyOf(map);
-        Map < Map < IProperty<?>, Comparable<? >> , BlockStateContainer.StateImplementation > map2 = Maps.newLinkedHashMap();
-        List<BlockStateContainer.StateImplementation> list1 = Lists.newArrayList();
+        Map < Map < IProperty<?>, Comparable<? >> , BlockStateContainer.StateImplementation > map2 = Maps. < Map < IProperty<?>, Comparable<? >> , BlockStateContainer.StateImplementation > newLinkedHashMap();
+        List<BlockStateContainer.StateImplementation> list1 = Lists.<BlockStateContainer.StateImplementation>newArrayList();
 
         for (List < Comparable<? >> list : Cartesian.func_179321_a(this.func_177620_e()))
         {
-            Map < IProperty<?>, Comparable<? >> map1 = MapPopulator.func_179400_b(this.field_177624_d.values(), list);
-            BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation = new BlockStateContainer.StateImplementation(p_i45663_1_, ImmutableMap.copyOf(map1));
+            Map < IProperty<?>, Comparable<? >> map1 = MapPopulator. < IProperty<?>, Comparable<? >> func_179400_b(this.field_177624_d.values(), list);
+            BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation = createState(blockIn, ImmutableMap.copyOf(map1), unlistedProperties);
             map2.put(map1, blockstatecontainer$stateimplementation);
             list1.add(blockstatecontainer$stateimplementation);
         }
@@ -116,10 +129,13 @@
 
     private List < Iterable < Comparable<? >>> func_177620_e()
     {
-        List < Iterable < Comparable<? >>> list = Lists.newArrayList();
+        List < Iterable < Comparable<? >>> list = Lists. < Iterable < Comparable<? >>> newArrayList();
+        ImmutableCollection < IProperty<? >> immutablecollection = this.field_177624_d.values();
+        UnmodifiableIterator unmodifiableiterator = immutablecollection.iterator();
 
-        for (IProperty<?> iproperty : this.field_177624_d.values())
+        while (unmodifiableiterator.hasNext())
         {
+            IProperty<?> iproperty = (IProperty)unmodifiableiterator.next();
             list.add(((IProperty)iproperty).func_177700_c());
         }
 
@@ -128,7 +144,7 @@
 
     public IBlockState func_177621_b()
     {
-        return this.field_177625_e.get(0);
+        return (IBlockState)this.field_177625_e.get(0);
     }
 
     public Block func_177622_c()
@@ -149,7 +165,7 @@
     @Nullable
     public IProperty<?> func_185920_a(String p_185920_1_)
     {
-        return this.field_177624_d.get(p_185920_1_);
+        return (IProperty)this.field_177624_d.get(p_185920_1_);
     }
 
     public static class StateImplementation extends BlockStateBase
@@ -164,14 +180,21 @@
                 this.field_177237_b = p_i45660_2_;
             }
 
+            protected StateImplementation(Block blockIn, ImmutableMap<IProperty<?>, Comparable<?>> propertiesIn, ImmutableTable<IProperty<?>, Comparable<?>, IBlockState> propertyValueTable)
+            {
+                this.field_177239_a = blockIn;
+                this.field_177237_b = propertiesIn;
+                this.field_177238_c = propertyValueTable;
+            }
+
             public Collection < IProperty<? >> func_177227_a()
             {
-                return Collections.unmodifiableCollection(this.field_177237_b.keySet());
+                return Collections. < IProperty<? >> unmodifiableCollection(this.field_177237_b.keySet());
             }
 
             public <T extends Comparable<T>> T func_177229_b(IProperty<T> p_177229_1_)
             {
-                Comparable<?> comparable = this.field_177237_b.get(p_177229_1_);
+                Comparable<?> comparable = (Comparable)this.field_177237_b.get(p_177229_1_);
 
                 if (comparable == null)
                 {
@@ -179,13 +202,13 @@
                 }
                 else
                 {
-                    return p_177229_1_.func_177699_b().cast(comparable);
+                    return (T)(p_177229_1_.func_177699_b().cast(comparable));
                 }
             }
 
             public <T extends Comparable<T>, V extends T> IBlockState func_177226_a(IProperty<T> p_177226_1_, V p_177226_2_)
             {
-                Comparable<?> comparable = this.field_177237_b.get(p_177226_1_);
+                Comparable<?> comparable = (Comparable)this.field_177237_b.get(p_177226_1_);
 
                 if (comparable == null)
                 {
@@ -238,11 +261,13 @@
                 }
                 else
                 {
-                    Table < IProperty<?>, Comparable<?>, IBlockState > table = HashBasedTable.create();
+                    Table < IProperty<?>, Comparable<?>, IBlockState > table = HashBasedTable. < IProperty<?>, Comparable<?>, IBlockState > create();
+                    UnmodifiableIterator unmodifiableiterator = this.field_177237_b.entrySet().iterator();
 
-                    for (Map.Entry < IProperty<?>, Comparable<? >> entry : this.field_177237_b.entrySet())
+                    while (unmodifiableiterator.hasNext())
                     {
-                        IProperty<?> iproperty = entry.getKey();
+                        Entry < IProperty<?>, Comparable<? >> entry = (Entry)unmodifiableiterator.next();
+                        IProperty<?> iproperty = (IProperty)entry.getKey();
 
                         for (Comparable<?> comparable : iproperty.func_177700_c())
                         {
@@ -259,7 +284,7 @@
 
             private Map < IProperty<?>, Comparable<? >> func_177236_b(IProperty<?> p_177236_1_, Comparable<?> p_177236_2_)
             {
-                Map < IProperty<?>, Comparable<? >> map = Maps.newHashMap(this.field_177237_b);
+                Map < IProperty<?>, Comparable<? >> map = Maps. < IProperty<?>, Comparable<? >> newHashMap(this.field_177237_b);
                 map.put(p_177236_1_, p_177236_2_);
                 return map;
             }
@@ -465,5 +490,94 @@
             {
                 return this.field_177239_a.func_193383_a(p_193401_1_, this, p_193401_2_, p_193401_3_);
             }
-        }
+
+            //Forge Start
+            @Override
+            public ImmutableTable<IProperty<?>, Comparable<?>, IBlockState> getPropertyValueTable()
+            {
+                return field_177238_c;
+            }
+
+            @Override
+            public int getLightOpacity(IBlockAccess world, BlockPos pos)
+            {
+                return this.field_177239_a.getLightOpacity(this, world, pos);
+            }
+
+            @Override
+            public int getLightValue(IBlockAccess world, BlockPos pos)
+            {
+                return this.field_177239_a.getLightValue(this, world, pos);
+            }
+
+            @Override
+            public boolean isSideSolid(IBlockAccess world, BlockPos pos, EnumFacing side)
+            {
+                return this.field_177239_a.isSideSolid(this, world, pos, side);
+            }
+
+            @Override
+            public boolean doesSideBlockChestOpening(IBlockAccess world, BlockPos pos, EnumFacing side)
+            {
+                return this.field_177239_a.doesSideBlockChestOpening(this, world, pos, side);
+            }
+
+            @Override
+            public boolean doesSideBlockRendering(IBlockAccess world, BlockPos pos, EnumFacing side)
+            {
+                return this.field_177239_a.doesSideBlockRendering(this, world, pos, side);
+            }
+        }
+
+    /**
+     * Forge added class to make building things easier.
+     * Will return an instance of BlockStateContainer appropriate for
+     * the list of properties passed in.
+     *
+     * Example usage:
+     *
+     *   protected BlockStateContainer createBlockState()
+     *   {
+     *       return (new BlockStateContainer.Builder(this)).add(FACING).add(SOME_UNLISTED).build();
+     *   }
+     *
+     */
+    public static class Builder
+    {
+        private final Block block;
+        private final List<IProperty<?>> listed = Lists.newArrayList();
+        private final List<net.minecraftforge.common.property.IUnlistedProperty<?>> unlisted = Lists.newArrayList();
+
+        public Builder(Block block)
+        {
+            this.block = block;
+        }
+
+        public Builder add(IProperty<?>... props)
+        {
+            for (IProperty<?> prop : props)
+                this.listed.add(prop);
+            return this;
+        }
+
+        public Builder add(net.minecraftforge.common.property.IUnlistedProperty<?>... props)
+        {
+            for (net.minecraftforge.common.property.IUnlistedProperty<?> prop : props)
+                this.unlisted.add(prop);
+            return this;
+        }
+
+        public BlockStateContainer build()
+        {
+            IProperty<?>[] listed = new IProperty[this.listed.size()];
+            listed = this.listed.toArray(listed);
+            if (this.unlisted.size() == 0)
+                return new BlockStateContainer(this.block, listed);
+
+            net.minecraftforge.common.property.IUnlistedProperty<?>[] unlisted = new net.minecraftforge.common.property.IUnlistedProperty[this.unlisted.size()];
+            unlisted = this.unlisted.toArray(unlisted);
+
+            return new net.minecraftforge.common.property.ExtendedBlockState(this.block, listed, unlisted);
+        }
+    }
 }
