--- before/net/minecraft/world/biome/BiomeEndDecorator.java
+++ after/net/minecraft/world/biome/BiomeEndDecorator.java
@@ -17,7 +17,7 @@
 
 public class BiomeEndDecorator extends BiomeDecorator
 {
-    private static final LoadingCache<Long, WorldGenSpikes.EndSpike[]> field_185427_L = CacheBuilder.newBuilder().expireAfterWrite(5L, TimeUnit.MINUTES).build(new BiomeEndDecorator.SpikeCacheLoader());
+    private static final LoadingCache<Long, WorldGenSpikes.EndSpike[]> field_185427_L = CacheBuilder.newBuilder().expireAfterWrite(5L, TimeUnit.MINUTES).<Long, WorldGenSpikes.EndSpike[]>build(new BiomeEndDecorator.SpikeCacheLoader());
     private final WorldGenSpikes field_76835_L = new WorldGenSpikes();
 
     protected void func_150513_a(Biome p_150513_1_, World p_150513_2_, Random p_150513_3_)
@@ -39,7 +39,7 @@
     {
         Random random = new Random(p_185426_0_.func_72905_C());
         long i = random.nextLong() & 65535L;
-        return field_185427_L.getUnchecked(i);
+        return field_185427_L.getUnchecked(Long.valueOf(i));
     }
 
     static class SpikeCacheLoader extends CacheLoader<Long, WorldGenSpikes.EndSpike[]>
@@ -50,15 +50,15 @@
 
             public WorldGenSpikes.EndSpike[] load(Long p_load_1_) throws Exception
             {
-                List<Integer> list = Lists.newArrayList(ContiguousSet.create(Range.closedOpen(0, 10), DiscreteDomain.integers()));
-                Collections.shuffle(list, new Random(p_load_1_));
+                List<Integer> list = Lists.newArrayList(ContiguousSet.create(Range.closedOpen(Integer.valueOf(0), Integer.valueOf(10)), DiscreteDomain.integers()));
+                Collections.shuffle(list, new Random(p_load_1_.longValue()));
                 WorldGenSpikes.EndSpike[] aworldgenspikes$endspike = new WorldGenSpikes.EndSpike[10];
 
                 for (int i = 0; i < 10; ++i)
                 {
                     int j = (int)(42.0D * Math.cos(2.0D * (-Math.PI + (Math.PI / 10D) * (double)i)));
                     int k = (int)(42.0D * Math.sin(2.0D * (-Math.PI + (Math.PI / 10D) * (double)i)));
-                    int l = list.get(i);
+                    int l = ((Integer)list.get(i)).intValue();
                     int i1 = 2 + l / 3;
                     int j1 = 76 + l * 3;
                     boolean flag = l == 1 || l == 2;
